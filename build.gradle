/*
 * Copyright (C) 2013-2020 Martin Goellnitz
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA, 02110-1301, USA
 */
plugins {
  id "edu.sc.seis.launch4j" version "2.4.6"
  id "net.ossindex.audit" version "0.4.11"
}

apply plugin: 'java'
apply plugin: 'application'

defaultTasks 'clean', 'build'

sourceCompatibility = 11
targetCompatibility = 11
compileJava.options.encoding = 'UTF-8'
compileJava.options.deprecation = true

repositories {
  jcenter()
}

sourceSets {
  main {
    java {
      srcDir 'src'
      exclude 'jfs/sync/fileencrypted/*.java'
      exclude '**/HeapSort.java'
    }
    resources {
      srcDir 'src'
      exclude '**/*.7z'; // I tend to hide some experimental codes here
      exclude '**/*.java'; // result of the exclusions above: this is necessary
    }
  }
}

dependencies {
  // dropbox client
  // implementation files(fileTree(dir: 'lib', includes: ['*.jar']))

  implementation 'org.slf4j:slf4j-api:1.7.30'
  implementation ('com.github.lookfirst:sardine:5.10') {
    exclude group: 'commons-logging', module: 'commons-logging'
  }
  // Use later version than required by sardine to addess vulnerabilities
  implementation 'org.apache.httpcomponents:httpclient:4.5.13'
  implementation 'org.slf4j:jcl-over-slf4j:1.7.30' // httpclient and vfs use JCL
  implementation 'org.slf4j:jul-to-slf4j:1.7.30' // starting with version 5.6 Sardine uses JUL

  // Cifs code looks good but I don't have shares to use so I skip this
  // implementation 'jcifs:jcifs:1.3.17'
  implementation ('org.apache.commons:commons-vfs2:2.7.0') {
    exclude group: 'commons-logging', module: 'commons-logging'
  }
  // Update transitive dependency databind
  implementation 'com.fasterxml.jackson.core:jackson-databind:2.11.4'
  implementation 'org.apache.commons:commons-lang3:3.11'
  implementation 'org.apache.commons:commons-compress:1.20'
  implementation ('net.sf.jsignature.io-tools:easystream:1.2.15') {
    exclude group: 'org.slf4j', module: 'slf4j-api' 
  }

  // implementation 'org.bouncycastle:bcprov-jdk16:1.46'
  implementation 'org.bouncycastle:bcprov-jdk15on:1.68'
  implementation 'javax.servlet:javax.servlet-api:4.0.1'
  
  // Needed to fix versions of transitive dependencies
  // launch4j 'com.thoughtworks.xstream:xstream:1.4.10'
  // launch4j 'commons-beanutils:commons-beanutils:1.9.3'

  // Logging:
  runtimeOnly 'ch.qos.logback:logback-classic:1.2.3'
  runtimeOnly 'org.codehaus.groovy:groovy:3.0.7'
}

mainClassName = 'jfs.JFileSync'

distTar.enabled = false

launch4j {
  mainClassName = project.mainClassName
  version = '3.0-SNAPSHOT'
  copyright = '(C) 2002-2019, J. Heidrich, M. Goellnitz'
  downloadUrl = 'https://github.com/mgoellnitz/JFileSync3/releases'
  supportUrl = 'https://github.com/mgoellnitz/JFileSync3'
  icon = "$project.projectDir/win/JFileSync3.ico"
  dontWrapJar = true
  xmlFileName = 'JFileSync3-launcher.xml'
  initialHeapSize = 1024
  maxHeapSize = 1536
}

task createApplication(type: edu.sc.seis.launch4j.tasks.Launch4jExternalTask) {
  outfile = 'JFileSync3.exe'
  xmlFileName = 'JFileSync3.xml'
}

distZip.dependsOn createApplication

startScripts {
  doLast {
    // Add some more reasonable memory settings to JFileSync3
    unixScript.text = unixScript.text.replace('DEFAULT_JVM_OPTS=""', 'DEFAULT_JVM_OPTS="-splash:$APP_HOME/bin/JFileSync3-640x50-splash.png -ms1280m -mx1536m -Xms1280m -Xmx1536m"')
    windowsScript.text = windowsScript.text.replace('DEFAULT_JVM_OPTS=', 'DEFAULT_JVM_OPTS=-ms1280m -mx1536m -Xms1280m -Xmx1536m')
    // Armor start script to use javaw and start when not used as a command line tool
    windowsScript.text = windowsScript.text.replace('java.exe', '%JAVA_CMD%')
    windowsScript.text = windowsScript.text.replace('@rem Find %JAVA_CMD%', 'set JAVA_PREFIX=start "JFileSync3 starting..."\nset JAVA_CMD=javaw.exe\nif "x%~1" == "x" goto noparams\nset JAVA_PREFIX=\nset JAVA_CMD=java.exe\n:noparams\n\n@rem Find java.exe')
    windowsScript.text = windowsScript.text.replace('"%JAVA_EXE%" %DEFAULT_JVM_OPTS%', '%JAVA_PREFIX% "%JAVA_EXE%" %DEFAULT_JVM_OPTS%')
  }
}

distZip {
  // TODO: later...
  // into(project.name+"/bin") {
  //	from 'bin'
  //	include 'E*.bat'
  //}
  into("$project.name") {
    from "$buildDir/launch4j"
    include '*.exe'
    include '*.xml'
  }
  // Sometimes I want to have the icon file at hand
  into("$project.name/bin") {
    from 'win'
    include '*.ico'
  }
  // For the Ubuntu Unity desktop integration this looks better
  into("$project.name/bin") {
    from 'ubuntu'
    include '*.desktop'
    include '*.png'
  }
  // legal stuff, examples, and documentation
  into(project.name) {
    from '.'
    include 'legal/*.*'
    include 'profiles/*.*'
    include 'README.md'
  }
  /*
  // I personally have the JCE stuff prepared there
  into(project.name) {
  from '..'
  include 'jce-jre-patches/**'
  }
  // You might package your personal profiles in here
  into(project.name) {
  from '..'
  include 'profiles/**'
  }
   */
}

private List<String> getCmd(String cmd) {
  // TODO: OS-Switch
  def prefix = "" // "cmd /c " for windows
  List<String> result = new ArrayList<>(2)
  "$prefix$cmd".split(" ").each {
    result.add(it)
  }
  return result
}

task prepareTestee(type:Copy)  {
  from zipTree("$buildDir/distributions/${project.name}.zip")
  into "$buildDir"
}

task prepareTest(type:Copy)  {
  from zipTree("test/test-folders.zip")
  into "$buildDir/${project.name}"
}

task makeTestExecutable(type:Exec) {
  // Only for linux
  workingDir "$buildDir/${project.name}"
  commandLine "chmod", "755",  "bin${File.separator}${project.name}"
}

task encrypt(type:Exec) {
  // Encrypt
  workingDir "$buildDir/${project.name}"
  commandLine getCmd("bin${File.separator}${project.name} -config ..${File.separator}..${File.separator}test${File.separator}1-encrypt-with-metadata.xml -nogui -nohistory -quiet")
}

task decrypt(type:Exec) {
  // Decrypt taking every folder metadata into account
  workingDir "$buildDir/${project.name}"
  commandLine  getCmd("bin${File.separator}${project.name} -config ..${File.separator}..${File.separator}test${File.separator}2-decrypt-with-metadata.xml -nogui -nohistory -quiet")
}

task decryptIgnoring(type:Exec) {
  // Decrypt ignoring any folder's metadata
  commandLine getCmd("bin${File.separator}${project.name} -config ..${File.separator}..${File.separator}test${File.separator}3-decrypt-without-metadata.xml -nogui -nohistory -quiet")
  workingDir "$buildDir/${project.name}"
}

task encryptionTest(type:Exec) {
  // Compare by hand
  commandLine getCmd("bin${File.separator}${project.name} -config ..${File.separator}..${File.separator}test${File.separator}4-compare-resulting-folders.xml -nohistory")
  workingDir "$buildDir/${project.name}"
}

encryptionTest.dependsOn decryptIgnoring
decryptIgnoring.dependsOn decrypt
decrypt.dependsOn encrypt
encrypt.dependsOn makeTestExecutable
makeTestExecutable.dependsOn prepareTest
prepareTest.dependsOn prepareTestee
prepareTestee.dependsOn check

// Project specific default output directory for eclipse users
// apply plugin: 'eclipse'
// eclipse.classpath.conventionMapping.defaultOutputDir = { new File(project.projectDir, 'build/classes/main') }
